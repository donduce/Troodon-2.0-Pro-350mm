#####################################################################
# PRINT START
#####################################################################
[gcode_macro PRINT_START]
gcode:
      
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("PLA")|string %}

    {% if FILAMENT_TYPE == 'ABS' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000                                                                        
    {% endif %}

    {% if FILAMENT_TYPE == 'ABSx' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    {% if FILAMENT_TYPE == 'ASA' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    {% if FILAMENT_TYPE == 'PETG' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    {% if FILAMENT_TYPE == 'PLA' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    {% if FILAMENT_TYPE == 'PLA+' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    {% if FILAMENT_TYPE == 'TPU' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                       
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}
        G4 P30000   
    {% endif %}

    G32                                                                                  # g32 macro with quad gantry leveling, nozzle clean etc.
    G92 E0                                                                               # Reset extruder
    BED_MESH_CLEAR 
    ##BED_MESH_CALIBRATE                                                                 # KAMP Adaptive Mesh
    BED_MESH_CALIBRATE ADAPTIVE=1                                                        # Klipper Adaptive Mesh
    G1 X320 Y355 F3600                                                                   # Move to wait position
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                           # Bed Temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP +1}          # Bed Temp reach                           
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}                        # Nozzle heating up
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP} MAXIMUM={EXTRUDER_TEMP +1}  # Wait for Nozzle and Bett Temp 
    G4 P10000                                                                            # Pause set Millsec.
    NOZZLE_CLEAN                                                                         # Nozzle clean
    ##LINE_PURGE                                                                         # KAMP Line Purge if used
    NOZZLE_PRIME                                                                         # Prime Line
    

######################################################################
#  PRINT END
#####################################################################
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    G91
    G0 Z5
    M140 S30
    M104 S215
    NOZZLE_CLEAN
    M109 S190
    NOZZLE_CLEAN
    M109 S170
    NOZZLE_CLEAN
    TURN_OFF_HEATERS
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107 
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_GCODE_OFFSET Z=0.000


#######################################
# CANCEL_PRINT macro
#######################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    PRINT_END
    SET_GCODE_OFFSET Z=0.000

######################################
# Nozzle Clean / Quad Gantry Leveling
######################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    M104 S150 T0
    M109 S150 T0
    NOZZLE_CLEAN
    QUAD_GANTRY_LEVEL
    NOZZLE_CLEAN
    CG28
    G0 X175 Y175 Z5 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32    


#####################################################################
#   Filament Change
#####################################################################

[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
  PAUSE
  UNLOAD_FILAMENT
  M117 Please load new filament and resume
  RESPOND MSG="Please load new filament and resume"

[gcode_macro m601]
description: Pauses the current print.
  Usage: M601
gcode:
    PAUSE

[gcode_macro m602]
description: Resumes the currently paused print.
  Usage: M602
gcode:
    RESUME

#####################################################################
#   Filament Load / Unload 
#####################################################################

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  G0 E100 F600
  G4 P1000
  # Purge
  G0 E40 F100
  M400e
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M104 S{params.TEMP|default(220, true)}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  G0 E-5 F3600
  G4 P3000
  G0 E5 F3600 
  G0 E-130 F300
  M117 Filament unloaded!
  RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
  RESTORE_GCODE_STATE NAME=unload_state

#####################################################################
#  Nozzle clean
#####################################################################

[gcode_macro NOZZLE_CLEAN]
description: wipes nozzle on brush to clean it
gcode:
  G90
  G1 X265 Y355 F6000
  G1 Z0.5 F3000
  G1 X305 Y355 F10000
  G1 X265 Y355 F10000
  G1 X305 Y355 F10000
  G1 X265 Y355 F10000
  G1 X305 Y355 F10000
  G1 X265 Y355 F10000
  G1 Z10 F6000

#####################################################################
#  Nozzle prime
#####################################################################  

[gcode_macro NOZZLE_PRIME]
description: prime the nozzle before printing
gcode:
  G92 E0
  G1 E-3 F1800
  G1 X0 Y0 F10000
  G1 Z0.3 F500
  G92 E0
  G1 E3 F500
  G92 E0
  G1 E-0.30000 F3600
  G1 Z0.2500 F1000
  G1 X350 Y0 E50 F1000 
  G92 E0
  G1 E-0.30000 F5400
  G1 Z10 F500

#######################################
# PAUSE Macro
#######################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro                           
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-5} F6000   ; park toolhead at rear center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

######################################################################
# Resume Printing after Pause
######################################################################

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}

        #RESETRGB                                                                              ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}            ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                  ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                               ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                    ; relative positioning
        M83                                                                                    ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                          ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                               ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                    ; restore position
        BASE_RESUME                                                                            ; resume print
    {% endif %}

#####################################################################
# RESONANCES TEST
#####################################################################    

[gcode_macro RESONANCES_TEST]
gcode:
      SHAPER_CALIBRATE

#####################################################################
# Calibrate Prope Offset
#####################################################################

[gcode_macro Calibrate_Probe_Offset]
gcode:
      PROBE_CALIBRATE

##################################
# Quad Gantry Leveling
##################################

[quad_gantry_level]

##  Gantry Corners for 350mm Build

gantry_corners:          
   -60,-10                # Front-left X/Y
   410,420                # Back-right X/Y

# Points to measure
points:        
    9,8                   # Front-left X/Y
    9,342                 # Back-left X/Y
   345,342                # Back-right X/Y
   345,8                  # Front-right X/Y

speed: 250                # Horizontal move speed between points
horizontal_move_z: 10      # Vertical movement between points
retry_tolerance: 0.0075   # When everything is very well calibrated
#retry_tolerance: 0.01    # When you want the QGL to complete more quickly
retries: 5                # Number of cycles to run
max_adjust: 20            # How much adjustment is acceptable

####################################
# Mesh Bed Leveling
####################################

[gcode_macro mesh_leveling]
gcode:
      G28 # Home All
      T0
      BED_MESH_CALIBRATE PROFILE=default METHOD=automatic # Start probing

[gcode_macro save_mesh]
gcode:
      BED_MESH_PROFILE SAVE=default
      SAVE_CONFIG
